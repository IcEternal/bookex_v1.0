/*
********************
  =trade system
********************
*/
order_list
	id
	book_id
	saler_id
	buyer_id
	start_time //预订时间，可以作为订单号
	finish_time //3. tradeSucc canceledBySaler canceledByBuyer canceledByAdmin 这几状态出现时的时间
	trade_method //自行交易1 委托交易0
	trade_status // 11.subscribe 21.gotBook 31 tradeSucc 32 canceledBySaler  33 canceledByBuyer  34 canceledByAdmin
	paid // 是否给卖家钱了？默认false
	remark //备注

买家:
	预订：
	点击预订后，生成一条order_list记录。
	预订时间start_time为时间戳，timestamp 可以作为订单号
	trade_status 为subscribe

	如果是委托交易，trade_status还会经历 gotBook
	
	取消交易：
	如果买家在预订之后，gotBook之前，卖家、买家、管理员都能取消交易
	gotBook之后，买家、卖家不能取消交易，只能由管理员取消交易
	
	
	完成交易：
	委托交易，买家没有完成交易的功能
	自行交易，可以在用户管理界面选择‘完成交易‘
	
卖家：
	卖家只有取消交易功能，书籍状态为canceledBySaler时
	
	卖家不应该有完成交易功能
	
管理员：
	管理员观察状态为subcribe且trade_method = 1的书籍
	
	管理员从卖家手中拿到书籍后，将书籍状态设置为gotBook，此时不必担心用户取消订单
	
	管理员把书送到，可以在管理界面选择‘完成交易’,可以将给卖家的钱的状态paid设置为TRUE
	
SQL：
	CREATE TABLE order_list(
	id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	book_id INT UNSIGNED NOT NULL,
	saler_id INT UNSIGNED NOT NULL,
	buyer_id INT UNSIGNED NOT NULL,
	start_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	finish_time TIMESTAMP,
	trade_method TINYINT UNSIGNED NOT NULL,
	trade_status TINYINT UNSIGNED NOT NULL,
	paid BOOL DEFAULT FALSE,
	remark VARCHAR(63)
	)ENGINE=MyISAM DEFAULT CHARSET=utf8;


/*
********************
  =user interface
********************
*/

NOTICE: 在每个页面添加一个头条信息数组

用户注册：
	1. 提供 用户名 密码 手机 邮箱 学号 寝室 支付宝账号(学校，头像)
		如果使用银行卡作为账号，需要提供真实姓名
	2. 记录用户注册时间

上传书本：
	1. 提供 书名 作者 出版社 ISBN 图片 原价 售价 图书分类 简介 是否愿意自行出售
	2. 记录 用户的愿意自行出售 选项
	3. 豆瓣API的 图片搜索功能 以及 ISBN搜索功能
	4. 自动分类的实现 

搜索书本：
	use query string

分类浏览：
	use query string

预订书本：
	预订后，若卖家愿意自行交易，则买家选择是否自行交易。
	NOTICE: 取消预订后自动跳转到userspace
	
NOTICE: 
	完成交易后，设置卖家已将书卖出，和买家已拿到书，两个状态

推荐书本：
	根据用户的学号，判断出用户的年级、专业。
	从以往的历史记录中，可以知道某年级某专业的学生需要什么书，然后给出推荐书本列表。

心愿单：
	用户从两个地方可以添加心愿书本：
	1.从推荐书本中，（搜索出来的书都是有库存的书，推荐书本根据历史数据得出，可以是当时没有库存的书），当时没有库存的书，可以添加到心愿单。
	2.从用户管理界面添加，添加方式跟上传书本类似。
	使用心愿单：心愿单中的书有人上传时，发送邮件或这短信通知。



/*
********************
  =admin interface
********************
*/
用户管理：
	1.通过学号、电话号码、邮箱等各种信息查找用户
	2.能对某个用户进行信息修改，包括，重置密码，冻结账户等操作
	3.显示用户统计信息：如用户上传量排名，某个用户的上传数和预订数，成交金额

书本管理：
	1.查找书本
	2.修改（书本基本信息、分类）、删除、批量删除

交易管理：
	显示当前交易情况，包括自行交易。可以进行的操作：取消交易、完成交易。


/*
********************
  =database level
********************
*/

NOTICE: 为了统一，跟日期有关的都以time为后缀吧
NOTICE：admin_book_search & admin_user_search 的字段是否有点冗余？
这两个表都可以不要了
时间可以用stamptime，时间戳，可以在数据库中设置默认记录添加时间
速度快，而且使用起来挺方便的。

考虑dropbox图片托管
存放大图与小图

user:
	id
	username
	password
	phone
	email
	student_number
	dormitory
	alipay
	school
	show_phone
	register_time
	remarks

admin:
	id
	user_id
	username
	view_book
	del_user
	del_book
	modify_user
	modify_book
	remarks

book://uploader 和 subscriber 是用id还是用户名？
	id
	name
	author
	price
	publisher
	ISBN
	decription
	uploader
	subscriber
	originprice
	img
	hasimg
	class
	show_phone
	use_phone
	del
	deltime
	subscribetime
	soldtime
	finishtime
	uploadtime
	remarks

user_book_search:
	id
	username
	view_or_search
	search_time
	key
	class
	remarks

book_collect:
	bc_id
	title
	author
	translator
	price
	publisher
	pubtime
	ISBN
	img
	remarks

subscribe_records:
	id 
	book_id \\书本id
	subscriber_id \\预订者id
	subscribetime \\预订时间
	gotit \\如果是委托交易，那么如果我们已经从卖家拿到这本书，就设为true;如果是自行交易，直接设为true
	canceled \\该预订被取消了就设为true
	trade_records_id \\如果该预订最后成功交易，那么该字段就设置为trade_records中相应的条目id
	remarks \\备注
	
trade_records:
	id 
	sub_records_id \\对应的subscribe_records中的条目id
	book_id \\ 书本id
	buyer_id \\ 买家id
	finishtime \\ 完成时间
	canceled \\如果该交易完成后又被撤回那么设为true
	has_paid \\如果已经向卖家支付宝打钱就设为true
	remarks	\\备注

admin_book_search:
	bs_id
	book_info
	uploader
	subscriber
	no_reserve
	reserved
	traded
	admin_name
	bs_time

admin_user_search:
	us_id
	username
	phone
	email
	student_number
	order_by_up
	admin_name
	us_time
